import{useCallback as h,useEffect as S,useReducer as C}from"react";import{yieldStream as k}from"yield-stream";import{streamState as A}from"./state.js";const D=({url:a,throttle:f=0,method:s="POST",data:i=null})=>{const m={done:!1,buffer:[],refreshCount:0,aborted:!1,controller:null},[u,t]=C(A,m),{done:p,buffer:y,refreshCount:d}=u,l=h(async(o,r)=>{let e=0;for await(const n of o)if(t({type:"add",payload:n}),r){const c=Date.now()-e,b=Math.max(0,r-c);await new Promise(w=>setTimeout(w,b)),e=Date.now()}t({type:"done"})},[t]);return S(()=>{const o=new AbortController;t({type:"setController",payload:o});let r;return(async()=>{try{const{signal:e}=o,n=await fetch(a,{signal:e,method:s,body:s==="POST"&&i?JSON.stringify(i):void 0});if(!n.ok||!n.body)throw new Error(`Failed to load response from URL: ${a}`);const c=k(n.body,o);r=requestAnimationFrame(()=>l(c,f))}catch(e){if(!(e instanceof DOMException&&e.name==="AbortError"))throw e}})(),()=>{o.abort(),cancelAnimationFrame(r)}},[d,a,f,l,s,i]),{buffer:y,done:p,refresh:()=>t({type:"refresh"}),cancel:()=>t({type:"cancel"})}};export{D as useBuffer};
